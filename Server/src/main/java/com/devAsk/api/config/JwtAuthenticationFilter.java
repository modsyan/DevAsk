package com.devAsk.api.config;import com.devAsk.api.repository.TokenRepository;import com.devAsk.api.service.JwtService;import com.devAsk.api.service.UserService;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.RequiredArgsConstructor;import org.springframework.lang.NonNull;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContext;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException;@Component@RequiredArgsConstructorpublic class JwtAuthenticationFilter extends OncePerRequestFilter {    private final JwtService jwtService;    private final TokenRepository tokenRepository;    private final UserService userService;    @Override    protected void doFilterInternal(            @NonNull            HttpServletRequest request,            @NonNull            HttpServletResponse response,            @NonNull            FilterChain filterChain    ) throws ServletException, IOException {        final String authHeader = request.getHeader("Authorization");        final String jwt;        final String userEmail;        if (request.getServletPath().contains("/api/v1/auth") || authHeader == null ||                !authHeader.startsWith("Bearer")) {            filterChain.doFilter(request, response);            return;        }        jwt = authHeader.substring(7);        userEmail = jwtService.extractUsername(jwt);        if (userEmail == null || SecurityContextHolder.getContext().getAuthentication() != null) {            filterChain.doFilter(request, response);            return;        }        UserDetails userDetails = userService.userDetailsService().loadUserByUsername(userEmail);        var isTokenExpiredOrRevoked =                tokenRepository.findByToken(jwt).map(token -> !token.isExpired() && !token.isRevoked()).orElse(false);        var isValidTokenSignature = jwtService.isTokenValid(jwt, userDetails);        if (!isTokenExpiredOrRevoked || !isValidTokenSignature) {            filterChain.doFilter(request, response);            return;        }        SecurityContext context = SecurityContextHolder.createEmptyContext();        UsernamePasswordAuthenticationToken authToken =                new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());        authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));        context.setAuthentication(authToken);        SecurityContextHolder.setContext(context);        filterChain.doFilter(request, response);    }}